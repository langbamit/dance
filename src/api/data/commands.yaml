bracket.openLeftBracket:
  title:
    en: Open window menu

  doc:
    en: |-
      Open window menu.

cancel:
  title:
    en: |-
      Cancel Dance operation

  doc:
    en: |-
      Cancel Dance operation.

  keys:
    qwerty: |-
      `escape` (core: normal, !recording, "!markersNavigationVisible")
      `escape` (core: input, "!suggestWidgetVisible")

changeInput:
  title:
    en: |-
      Change current input

  doc:
    en: |-
      Change current input.

      When showing some menus, Dance can navigate their history:

      | Keybinding            | Command                                    |
      | --------------------- | ------------------------------------------ |
      | `up` (core: prompt)   | `[".changeInput", { action: "previous" }]` |
      | `down` (core: prompt) | `[".changeInput", { action: "next"     }]` |

dev.copyLastErrorMessage:
  title:
    en: |-
      Copies the last encountered error message

  doc:
    en: |-
      Copies the last encountered error message.

dev.setSelectionBehavior:
  title:
    en: |-
      Set the selection behavior of the specified mode

  doc:
    en: |-
      Set the selection behavior of the specified mode.

edit.align:
  title:
    en: |-
      Align selections

  doc:
    en: |-
      Align selections.

      Align selections, aligning the cursor of each selection by inserting spaces
      before the first character of each selection.

  keys:
    qwerty: |-
      `&` (helix: normal)
      `&` (helix: select)

edit.alignByOffet:
  title:
    en: |-
      Align selections by offset from start character (negative offset)

  doc:
    en: |-
      Align selections by offset from start character (negative offset).

      What is negative offset?
      E.g.
      0 offset is the start character of the selection.
      1 offset is the character before the start character of the selection.

      Align selections, aligning the cursor of each selection by inserting negative offset character
      before the first character of each selection.

  keys:
    qwerty: |-
      `c-&` (helix: normal)
      `c-&` (helix: select)

edit.case.swap:
  title:
    en: |-
      Swap case

  doc:
    en: |-
      Swap case.

  keys:
    qwerty: |-
      `` s-` `` (helix: normal)
      `` s-` `` (helix: select)

edit.case.toLower:
  title:
    en: |-
      Transform to lower case

  doc:
    en: |-
      Transform to lower case.

  keys:
    qwerty: |-
      `` ` `` (helix: normal)
      `` ` `` (helix: select)

edit.case.toUpper:
  title:
    en: |-
      Transform to upper case

  doc:
    en: |-
      Transform to upper case.

  keys:
    qwerty: |-
      `` a-` `` (helix: normal)
      `` a-` `` (helix: select)

edit.copyIndentation:
  title:
    en: |-
      Copy indentation

  doc:
    en: |-
      Copy indentation.

      Copy the indentation of the main selection (or the count one if a count is
      given) to all other ones.

  keys:
    qwerty: |-
      `a-&` (kakoune: normal)
      `a-&` (kakoune: select)

edit.deindent:
  title:
    en: |-
      Deindent selected lines

  doc:
    en: |-
      Deindent selected lines.

  keys:
    qwerty: |-
      `a-<` (kakoune: normal)
      `a-<` (kakoune: select)

edit.deindent.withIncomplete:
  title:
    en: |-
      Deindent selected lines (including incomplete indent)

  doc:
    en: |-
      Deindent selected lines (including incomplete indent).

  keys:
    qwerty: |-
      `<` (helix: normal)
      `<` (helix: normal)

edit.delete:
  title:
    en: Delete

  commands: |-
    [".edit.insert", { register: "_", $exclude: [] }]

  keys:
    qwerty: |-
      `a-d` (helix: normal)
      `a-d` (helix: select)

edit.delete-insert:
  title:
    en: Delete and switch to Insert

  commands: |-
    [".modes.set", { mode: "insert", $include: ["mode"] }], [".edit.insert", { register: "_", $exclude: ["mode"] }]

  keys:
    qwerty: |-
      `a-c` (helix: normal)
      `a-c` (helix: select)

edit.indent:
  title:
    en: |-
      Indent selected lines

  doc:
    en: |-
      Indent selected lines.

  keys:
    qwerty: |-
      `>` (helix: normal)
      `>` (helix: select)

edit.indent.withEmpty:
  title:
    en: |-
      Indent selected lines (including empty lines)

  doc:
    en: |-
      Indent selected lines (including empty lines).

  keys:
    qwerty: |-
      `a->` (kakoune: normal)
      `a->` (kakoune: select)

edit.insert:
  title:
    en: |-
      Insert contents of register

  keys:
    qwerty: |-
      `s-r` (helix: normal)
      `s-r` (helix: select)

  doc:
    en: |-
      Insert contents of register.

      A `where` argument may be specified to state where the text should be
      inserted relative to each selection. If unspecified, each selection will be
      replaced by the text.

      Specify `"shift": "select"` to select the inserted selection,
      `"shift": "extend"` to extend to the inserted text, and nothing to keep the
      current selections.

      Specify `all` to paste all contents next to each selection.

edit.join:
  title:
    en: |-
      Join lines

  doc:
    en: |-
      Join lines.

  keys:
    qwerty: |-
      `s-j` (helix: normal)
      `s-j` (helix: select)

edit.join.select:
  title:
    en: |-
      Join lines and select inserted separators

  doc:
    en: |-
      Join lines and select inserted separators.

  keys:
    qwerty: |-
      `s-a-j` (helix: normal)
      `s-a-j` (helix: select)

edit.newLine.above:
  title:
    en: |-
      Insert new line above each selection

  keys:
    qwerty: |-
      `s-a-o` (kakoune: normal)
      `s-a-o` (kakoune: select)

  doc:
    en: |-
      Insert new line above each selection.

      Specify `"shift": "select"` to select the inserted selections, and nothing to
      keep the current selections.

edit.newLine.above.insert:
  title:
    en: Insert new line above and switch to insert

  commands: |-
    [".edit.newLine.above", { shift: "select" }], [".modes.insert.before", { $exclude: [] }]

  keys:
    qwerty: |-
      `s-o` (helix: normal)
      `s-o` (helix: normal)

edit.newLine.below:
  title:
    en: |-
      Insert new line below each selection

  keys:
    qwerty: |-
      `a-o` (kakoune: normal)
      `a-o` (kakoune: select)

  doc:
    en: |-
      Insert new line below each selection.

      Specify `"shift": "select"` to select the inserted selections, and nothing to
      keep the current selections.

edit.newLine.below.insert:
  title:
    en: Insert new line below and switch to insert

  commands: |-
    [".edit.newLine.below", { shift: "select" }], [".modes.insert.before", { $exclude: [] }]

  keys:
    qwerty: |-
      `o` (helix: normal)
      `o` (helix: normal)

edit.paste.after:
  title:
    en: Paste after

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "end" , $exclude: [] }]

  keys:
    qwerty: |-
      `p` (helix: select)

edit.paste.after.select:
  title:
    en: Paste after and select

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "end" , shift: "select", $exclude: [] }]

  keys:
    qwerty: |-
      `p` (helix: normal)

edit.paste.before:
  title:
    en: Paste before

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "start", $exclude: [] }]

  keys:
    qwerty: |-
      `s-p` (helix: select)

edit.paste.before.select:
  title:
    en: Paste before and select

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "start", shift: "select", $exclude: [] }]

  keys:
    qwerty: |-
      `s-p` (helix: normal)

edit.pasteAll.after:
  title:
    en: Paste all after

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "end" , all: true, $exclude: [] }]

  keys:
    qwerty: ""

edit.pasteAll.after.select:
  title:
    en: Paste all after and select

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "end" , all: true, shift: "select", $exclude: [] }]

  keys:
    qwerty: ""

edit.pasteAll.before:
  title:
    en: Paste all before

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "start", all: true, $exclude: [] }]

  keys:
    qwerty: ""

edit.pasteAll.before.select:
  title:
    en: Paste all before and select

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "start", all: true, shift: "select", $exclude: [] }]

  keys:
    qwerty: ""

edit.replaceCharacters:
  title:
    en: |-
      Replace characters

  doc:
    en: |-
      Replace characters.

  keys:
    qwerty: |-
      `r` (helix: normal)
      `r` (helix: select)

edit.selectRegister-insert:
  title:
    en: Pick register and replace

  commands: |-
    [".selectRegister", { $include: ["register"] }], [".edit.insert", { $exclude: ["register"] }]

  keys:
    qwerty: |-
      `c-r` (helix: insert)

edit.yank-delete:
  title:
    en: Copy and delete

  commands: |-
    [".selections.saveText", { $include: ["register"] }], [".edit.insert", { register: "_", $exclude: ["register"] }]

  keys:
    qwerty: |-
      `d` (helix: normal)
      `d` (helix: select)

edit.yank-delete-insert:
  title:
    en: Copy, delete and switch to Insert

  commands: |-
    [".selections.saveText", { $include: ["register"] }], [".modes.set", { mode: "insert", $include: ["mode"] }], [".edit.insert", { register: "_", $exclude: ["register","mode"] }]

  keys:
    qwerty: |-
      `c` (helix: normal)
      `c` (helix: select)

edit.yank-replace:
  title:
    en: Copy and replace

  commands: |-
    [".selections.saveText", { register: "tmp" }], [".edit.insert"], [".updateRegister", { copyFrom: "tmp", $exclude: [] }]

  keys:
    qwerty: ""

history.recording.play:
  title:
    en: |-
      Replay recording

  keys:
    qwerty: |-
      `q` (helix: normal)
      `q` (helix: select)

  doc:
    en: |-
      Replay recording.

history.recording.start:
  title:
    en: |-
      Start recording

  keys:
    qwerty: |-
      `s-q` (helix: normal, !recording)
      `s-q` (helix: select, !recording)

  doc:
    en: |-
      Start recording.

history.recording.stop:
  title:
    en: |-
      Stop recording

  keys:
    qwerty: |-
      `escape` (helix: normal, recording)
      `s-q` (helix: normal, recording)
      `escape` (helix: select, recording)
      `s-q` (helix: select, recording)

  doc:
    en: |-
      Stop recording.

history.redo:
  title:
    en: |-
      Redo

  doc:
    en: |-
      Redo.

  keys:
    qwerty: |-
      `s-u` (helix: normal)
      `s-u` (helix: select)

history.redo.selections:
  title:
    en: |-
      Redo a change of selections

  doc:
    en: |-
      Redo a change of selections.

  keys:
    qwerty: |-
      `s-a-u` (helix: normal)
      `s-a-u` (helix: select)

history.repeat:
  title:
    en: |-
      Repeat last change

  doc:
    en: |-
      Repeat last change.

history.repeat.edit:
  title:
    en: |-
      Repeat last edit without a command

  keys:
    qwerty: |-
      `.` (helix: normal)
      `.` (helix: select)

  doc:
    en: |-
      Repeat last edit without a command.

history.repeat.seek:
  title:
    en: Repeat last seek

  commands: |-
    [".history.repeat", { filter: "dance\\.seek", $include: ["count"] }]

  keys:
    qwerty: |-
      `a-.` (kakoune: normal)

history.repeat.selection:
  title:
    en: Repeat last selection change

  commands: |-
    [".history.repeat", { filter: "dance\\.(seek|select|selections)", $include: ["count"] }]

  keys:
    qwerty: ""

history.undo:
  title:
    en: |-
      Undo

  doc:
    en: |-
      Undo.

  keys:
    qwerty: |-
      `u` (helix: normal)
      `u` (helix: select)

history.undo.selections:
  title:
    en: |-
      Undo a change of selections

  doc:
    en: |-
      Undo a change of selections.

  keys:
    qwerty: |-
      `a-u` (helix: normal)
      `a-u` (helix: select)

ifEmpty:
  title:
    en: |-
      Executes one of the specified commands depending on whether the current
      selections are empty

  doc:
    en: |-
      Executes one of the specified commands depending on whether the current
      selections are empty.

ignore:
  title:
    en: |-
      Ignore key

  doc:
    en: |-
      Ignore key.

keybindings.setup:
  title:
    en: |-
      Set up Dance keybindings

  doc:
    en: |-
      Set up Dance keybindings.

modes.insert.after:
  title:
    en: Insert after

  commands: |-
    [".selections.faceForward" , { record: false }], [".modes.set", { mode: "insert", $include: ["mode"] }], [".selections.reduce", { where: "end" , record: false, empty: true, $exclude: ["mode"] }]

  keys:
    qwerty: |-
      `a` (helix: normal)

modes.insert.before:
  title:
    en: Insert before

  commands: |-
    [".selections.faceBackward", { record: false }], [".modes.set", { mode: "insert", $include: ["mode"] }], [".selections.reduce", { where: "start", record: false, empty: true, $exclude: ["mode"] }]

  keys:
    qwerty: |-
      `i` (helix: normal)

modes.insert.lineEnd:
  title:
    en: Insert at line end

  commands: |-
    [".select.lineEnd" , { shift: "jump" }], [".modes.set", { mode: "insert", $include: ["mode"] }], [".selections.reduce", { where: "end" , record: false, empty: true, $exclude: ["mode"] }]

  keys:
    qwerty: |-
      `s-a` (helix: normal)

modes.insert.lineStart:
  title:
    en: Insert at line start

  commands: |-
    [".select.lineStart", { shift: "jump", skipBlank: true }], [".modes.set", { mode: "insert", $include: ["mode"] }], [".selections.reduce", { where: "start", record: false, empty: true, $exclude: ["mode"] }]

  keys:
    qwerty: |-
      `s-i` (helix: normal)

modes.set:
  title:
    en: >-
      Set Dance mode

  doc:
    en: |-
      Set Dance mode.

modes.set.insert:
  title:
    en: Set mode to Insert

  commands: |-
    [".modes.set", { mode: "insert" }]

  keys:
    qwerty: ""

modes.set.normal:
  title:
    en: Set mode to Normal

  commands: |-
    [".modes.set", { mode: "normal" }], ["hideSuggestWidget"]

  keys:
    qwerty: |-
      `escape` (helix: insert, "!suggestWidgetVisible")
      `escape` (helix: select)
      `v` (helix: select)

modes.set.select:
  title:
    en: Set mode to Select

  commands: |-
    [".modes.set", { mode: "select" }]

  keys:
    qwerty: |-
      `v` (helix: normal)

modes.set.temporarily:
  title:
    en: >-
      Set Dance mode temporarily

  doc:
    en: |-
      Set Dance mode temporarily.

modes.set.temporarily.insert:
  title:
    en: Temporary Insert mode

  commands: |-
    [".modes.set.temporarily", { mode: "insert" }]

  keys:
    qwerty: |-
      `c-v` (helix: normal)

modes.set.temporarily.normal:
  title:
    en: Temporary Normal mode

  commands: |-
    [".modes.set.temporarily", { mode: "normal" }]

  keys:
    qwerty: |-
      `c-v` (helix: insert)

openMenu:
  title:
    en: |-
      Open menu

  doc:
    en: |-
      Open menu.

      If no menu is specified, a prompt will ask for the name of the menu to open.

      Alternatively, a `menu` can be inlined in the arguments.

      Pass a `prefix` argument to insert the prefix string followed by the typed
      key if it does not match any menu entry. This can be used to implement chords
      like `jj`.

run:
  title:
    en: |-
      Run code

  doc:
    en: |-
      Run code.

      There are two ways to invoke this command. The first one is to provide an
      `code` string argument. This code must be a valid JavaScript string, and will
      be executed with full access to the [Dance API](../api/README.md). For
      instance,

      ```json
      {
        "command": "dance.run",
        "args": {
          "code": "Selections.set(Selections.filter(text => text.includes('foo')))",
        },
      },
      ```

      If no argument is provided, a prompt will be shown asking for an input.
      Furthermore, an array of strings can be passed to make longer functions
      easier to read:

      ```json
      {
        "command": "dance.run",
        "args": {
          "code": [
            "for (const selection of Selections.current) {",
            "  console.log(text(selection));",
            "}",
          ],
        },
      },
      ```

      The second way to use this command is with the `commands` argument. This
      argument must be an array of "command-like" values. The simplest
      "command-like" value is a string corresponding to the command itself:

      ```json
      {
        "command": "dance.run",
        "args": {
          "commands": [
            "dance.modes.set.normal",
          ],
        },
      },
      ```

      But arguments can also be provided by passing an array:

      ```json
      {
        "command": "dance.run",
        "args": {
          "commands": [
            ["dance.modes.set", { "mode": "normal" }],
          ],
        },
      },
      ```

      Or by passing an object, like regular VS Code key bindings:

      ```json
      {
        "command": "dance.run",
        "args": {
          "commands": [
            {
              "command": "dance.modes.set",
              "args": { "mode": "normal" },
            },
          ],
        },
      },
      ```

      These values can be mixed:

      ```json
      {
        "command": "dance.run",
        "args": {
          "commands": [
            ["dance.selections.saveText", { "register": "^" }],
            {
              "command": "dance.modes.set",
              "args": { "mode": "normal" },
            },
            "hideSuggestWidget",
          ],
        },
      },
      ```

      If both `code` and `commands` are given, Dance will use `code` if arbitrary
      code execution is enabled, or `commands` otherwise.

search:
  title:
    en: |-
      Search

  keys:
    qwerty: |-
      `/` (helix: normal)
      `NumPad_Divide` (helix: normal)
      `/` (helix: select)
      `NumPad_Divide` (helix: select)

  doc:
    en: |-
      Search.

search.backward:
  title:
    en: Search backward

  commands: |-
    [".search", { direction: -1 , $exclude: [] }]

  keys:
    qwerty: |-
      `a-/` (helix: normal)
      `a-/` (helix: select)

search.backward.extend:
  title:
    en: Search backward (extend)

  commands: |-
    [".search", { direction: -1, shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `a-?` (helix: normal)

search.extend:
  title:
    en: Search (extend)

  commands: |-
    [".search", { shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `?` (helix: normal)
      `?` (helix: select)

search.next:
  title:
    en: |-
      Select next match

  keys:
    qwerty: |-
      `n` (helix: normal)
      `n` (helix: select)

  doc:
    en: |-
      Select next match.

search.previous:
  title:
    en: Select previous match

  commands: |-
    [".search.next", { direction: -1 , $exclude: [] }]

  keys:
    qwerty: |-
      `s-n` (helix: normal)
      `s-n` (helix: select)

search.selection:
  title:
    en: |-
      Search current selection

  keys:
    qwerty: |-
      `a-*` (kakoune: normal)
      `a-NumPad_Multiply` (kakoune: normal)
      `a-*` (kakoune: select)
      `a-NumPad_Multiply` (kakoune: select)

  doc:
    en: |-
      Search current selection.

search.selection.smart:
  title:
    en: Search current selection (smart)

  commands: |-
    [".search.selection", { smart: true, $include: ["register"] }]

  keys:
    qwerty: |-
      `*` (helix: normal)
      `NumPad_Multiply` (helix: normal)
      `*` (helix: select)
      `NumPad_Multiply` (helix: select)

seek:
  title:
    en: |-
      Select to character (excluded)

  keys:
    qwerty: |-
      `t` (helix: normal)

  doc:
    en: |-
      Select to character (excluded).

seek.askObject:
  title:
    en: Select whole object

  commands: |-
    [".openMenu", { menu: "object", title: "Select whole object..." }]

  keys:
    qwerty: ""

seek.askObject.end:
  title:
    en: Select to whole object end

  commands: |-
    [".openMenu", { menu: "object", pass: [{ where: "end" }] }]

  keys:
    qwerty: ""

seek.askObject.end.extend:
  title:
    en: Extend to whole object end

  commands: |-
    [".openMenu", { menu: "object", pass: [{ where: "end" , shift: "extend" }] }]

  keys:
    qwerty: ""

seek.askObject.inner:
  title:
    en: Select inner object

  commands: |-
    [".openMenu", { menu: "object", pass: [{ inner: true }], title: "Select inner object..." }]

  keys:
    qwerty: ""

seek.askObject.inner.end:
  title:
    en: Select to inner object end

  commands: |-
    [".openMenu", { menu: "object", pass: [{ inner: true, where: "end" }] }]

  keys:
    qwerty: ""

seek.askObject.inner.end.extend:
  title:
    en: Extend to inner object end

  commands: |-
    [".openMenu", { menu: "object", pass: [{ inner: true, where: "end" , shift: "extend" }] }]

  keys:
    qwerty: ""

seek.askObject.inner.start:
  title:
    en: Select to inner object start

  commands: |-
    [".openMenu", { menu: "object", pass: [{ inner: true, where: "start" }] }]

  keys:
    qwerty: ""

seek.askObject.inner.start.extend:
  title:
    en: Extend to inner object start

  commands: |-
    [".openMenu", { menu: "object", pass: [{ inner: true, where: "start", shift: "extend" }] }]

  keys:
    qwerty: ""

seek.askObject.start:
  title:
    en: Select to whole object start

  commands: |-
    [".openMenu", { menu: "object", pass: [{ where: "start" }] }]

  keys:
    qwerty: ""

seek.askObject.start.extend:
  title:
    en: Extend to whole object start

  commands: |-
    [".openMenu", { menu: "object", pass: [{ where: "start", shift: "extend" }] }]

  keys:
    qwerty: ""

seek.backward:
  title:
    en: Select to character (excluded, backward)

  commands: |-
    [".seek", { direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `s-t` (helix: normal)

seek.enclosing:
  title:
    en: |-
      Select to next enclosing character

  doc:
    en: |-
      Select to next enclosing character.

seek.enclosing.backward:
  title:
    en: Select to previous enclosing character

  commands: |-
    [".seek.enclosing", { direction: -1, $exclude: [] }]

  keys:
    qwerty: ""

seek.enclosing.extend:
  title:
    en: Extend to next enclosing character

  commands: |-
    [".seek.enclosing", { shift: "extend" , $exclude: [] }]

  keys:
    qwerty: ""

seek.enclosing.extend.backward:
  title:
    en: Extend to previous enclosing character

  commands: |-
    [".seek.enclosing", { shift: "extend", direction: -1, $exclude: [] }]

  keys:
    qwerty: ""

seek.extend:
  title:
    en: Extend to character (excluded)

  commands: |-
    [".seek", { shift: "extend" , $exclude: [] }]

  keys:
    qwerty: |-
      `t` (helix: select)

seek.extend.backward:
  title:
    en: Extend to character (excluded, backward)

  commands: |-
    [".seek", { shift: "extend", direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `s-t` (helix: select)

seek.included:
  title:
    en: Select to character (included)

  commands: |-
    [".seek", { include: true , $exclude: [] }]

  keys:
    qwerty: |-
      `f` (helix: normal)

seek.included.backward:
  title:
    en: Select to character (included, backward)

  commands: |-
    [".seek", { include: true, direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `s-f` (helix: normal)

seek.included.extend:
  title:
    en: Extend to character (included)

  commands: |-
    [".seek", { include: true, shift: "extend" , $exclude: [] }]

  keys:
    qwerty: |-
      `f` (helix: select)

seek.included.extend.backward:
  title:
    en: Extend to character (included, backward)

  commands: |-
    [".seek", { include: true, shift: "extend", direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `s-f` (helix: select)

seek.leap:
  title:
    en: |-
      Leap forward

  doc:
    en: |-
      Leap forward.

      Inspired by [`leap.nvim`](https://github.com/ggandor/leap.nvim).

seek.leap.backward:
  title:
    en: Leap backward

  commands: |-
    [".seek.leap", { direction: -1, $exclude: [] }]

seek.object:
  title:
    en: |-
      Select object

  doc:
    en: |-
      Select object.

seek.word:
  title:
    en: |-
      Select to next word start

  keys:
    qwerty: |-
      `w` (helix: normal)

  doc:
    en: |-
      Select to next word start.

      Select the word and following whitespaces on the right of the end of each selection.

seek.word.backward:
  title:
    en: Select to previous word start

  commands: |-
    [".seek.word", { direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `b` (helix: normal)

seek.word.extend:
  title:
    en: Extend to next word start

  commands: |-
    [".seek.word", { shift: "extend" , $exclude: [] }]

  keys:
    qwerty: |-
      `w` (helix: select)

seek.word.extend.backward:
  title:
    en: Extend to previous word start

  commands: |-
    [".seek.word", { shift: "extend", direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `b` (helix: select)

seek.word.ws:
  title:
    en: Select to next non-whitespace word start

  commands: |-
    [".seek.word", { ws: true , $exclude: [] }]

  keys:
    qwerty: |-
      `s-w` (helix: normal)

seek.word.ws.backward:
  title:
    en: Select to previous non-whitespace word start

  commands: |-
    [".seek.word", { ws: true, direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `s-b` (helix: normal)

seek.word.ws.extend:
  title:
    en: Extend to next non-whitespace word start

  commands: |-
    [".seek.word", { ws: true, shift: "extend" , $exclude: [] }]

  keys:
    qwerty: |-
      `s-w` (helix: select)

seek.word.ws.extend.backward:
  title:
    en: Extend to previous non-whitespace word start

  commands: |-
    [".seek.word", { ws: true, shift: "extend", direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `s-b` (helix: select)

seek.wordEnd:
  title:
    en: Select to next word end

  commands: |-
    [".seek.word", { stopAtEnd: true , $exclude: [] }]

  keys:
    qwerty: |-
      `e` (helix: normal)

seek.wordEnd.extend:
  title:
    en: Extend to next word end

  commands: |-
    [".seek.word", { stopAtEnd: true , shift: "extend" , $exclude: [] }]

  keys:
    qwerty: |-
      `e` (helix: select)

seek.wordEnd.ws:
  title:
    en: Select to next non-whitespace word end

  commands: |-
    [".seek.word", { stopAtEnd: true , ws: true , $exclude: [] }]

  keys:
    qwerty: |-
      `s-e` (helix: normal)

seek.wordEnd.ws.extend:
  title:
    en: Extend to next non-whitespace word end

  commands: |-
    [".seek.word", { stopAtEnd: true , ws: true, shift: "extend" , $exclude: [] }]

  keys:
    qwerty: |-
      `s-e` (helix: select)

select.buffer:
  title:
    en: |-
      Select whole buffer

  doc:
    en: |-
      Select whole buffer.

  keys:
    qwerty: |-
      `%` (helix: normal)
      `%` (helix: select)

select.documentEnd.extend:
  title:
    en: Extend to last character

  commands: |-
    [".select.lineEnd", { count: 2147483647, shift: "extend", $exclude: [] }]

  keys:
    qwerty: ""

select.documentEnd.jump:
  title:
    en: Jump to last character

  commands: |-
    [".select.lineEnd", { count: 2147483647, shift: "jump" , $exclude: [] }]

  keys:
    qwerty: ""

select.down.extend:
  title:
    en: Extend down

  commands: |-
    [".select.vertically", { direction: 1, shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `j` (helix: select)
      `down` (helix: select)

select.down.jump:
  title:
    en: Jump down

  commands: |-
    [".select.vertically", { direction: 1, shift: "jump" , $exclude: [] }]

  keys:
    qwerty: |-
      `j` (helix: normal)  , `down` (helix: normal)

select.firstLine.extend:
  title:
    en: Extend to first line

  commands: |-
    [".select.lineStart", { count: 0, shift: "extend", $exclude: [] }]

  keys:
    qwerty: ""

select.firstLine.jump:
  title:
    en: Jump to first line

  commands: |-
    [".select.lineStart", { count: 0, shift: "jump" , $exclude: [] }]

  keys:
    qwerty: ""

select.firstVisibleLine:
  title:
    en: >-
      Select to first visible line

  doc:
    en: |-
      Select to first visible line.

select.firstVisibleLine.extend:
  title:
    en: Extend to first visible line

  commands: |-
    [".select.firstVisibleLine", { shift: "extend" }]

select.firstVisibleLine.jump:
  title:
    en: Jump to first visible line

  commands: |-
    [".select.firstVisibleLine", { shift: "jump" }]

select.horizontally:
  title:
    en: |-
      Select horizontally

  doc:
    en: |-
      Select horizontally.

select.lastLine:
  title:
    en: |-
      Select to last line

  doc:
    en: |-
      Select to last line.

select.lastLine.extend:
  title:
    en: Extend to last line

  commands: |-
    [".select.lastLine", { shift: "extend" }]

select.lastLine.jump:
  title:
    en: Jump to last line

  commands: |-
    [".select.lastLine", { shift: "jump" }]

select.lastVisibleLine:
  title:
    en: >-
      Select to last visible line

  doc:
    en: |-
      Select to last visible line.

select.lastVisibleLine.extend:
  title:
    en: Extend to last visible line

  commands: |-
    [".select.lastVisibleLine", { shift: "extend" }]

select.lastVisibleLine.jump:
  title:
    en: Jump to last visible line

  commands: |-
    [".select.lastVisibleLine", { shift: "jump" }]

select.left.extend:
  title:
    en: Extend left

  commands: |-
    [".select.horizontally", { direction: -1, shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `h` (helix: select)
      `left` (helix: select)

select.left.jump:
  title:
    en: Jump left

  commands: |-
    [".select.horizontally", { direction: -1, shift: "jump" , $exclude: [] }]

  keys:
    qwerty: |-
      `h` (helix: normal)  , `left` (helix: normal)

select.line.above:
  title:
    en: |-
      Select line above

  doc:
    en: |-
      Select line above.

select.line.above.extend:
  title:
    en: |-
      Extend to line above

  doc:
    en: |-
      Extend to line above.

select.line.below:
  title:
    en: |-
      Select line below

  doc:
    en: |-
      Select line below.

select.line.below.extend:
  title:
    en: |-
      Extend to line below

  doc:
    en: |-
      Extend to line below.

select.lineEnd:
  title:
    en: |-
      Select to line end

  keys:
    qwerty: |-
      `a-l` (kakoune: normal)
      `end` (kakoune: normal)

  doc:
    en: |-
      Select to line end.

select.lineEnd.extend:
  title:
    en: Extend to line end

  commands: |-
    [".select.lineEnd", { shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-l` (kakoune: normal)
      `s-end` (kakoune: normal)

select.lineStart:
  title:
    en: >-
      Select to line start

  doc:
    en: |-
      Select to line start.

select.lineStart.extend:
  title:
    en: Extend to line start

  commands: |-
    [".select.lineStart", { shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-h` (kakoune: normal)
      `s-home` (kakoune: normal)

select.lineStart.jump:
  title:
    en: Jump to line start

  commands: |-
    [".select.lineStart", { shift: "jump" , $exclude: [] }]

  keys:
    qwerty: |-
      `a-h` (kakoune: normal)
      `s-g` (kakoune: normal)

select.lineStart.skipBlank.extend:
  title:
    en: Extend to line start (skip blank)

  commands: |-
    [".select.lineStart", { skipBlank: true, shift: "extend", $exclude: [] }]

  keys:
    qwerty: ""

select.lineStart.skipBlank.jump:
  title:
    en: Jump to line start (skip blank)

  commands: |-
    [".select.lineStart", { skipBlank: true, shift: "jump" , $exclude: [] }]

  keys:
    qwerty: ""

select.middleVisibleLine:
  title:
    en: >-
      Select to middle visible line

  doc:
    en: |-
      Select to middle visible line.

select.middleVisibleLine.extend:
  title:
    en: Extend to middle visible line

  commands: |-
    [".select.middleVisibleLine", { shift: "extend" }]

select.middleVisibleLine.jump:
  title:
    en: Jump to middle visible line

  commands: |-
    [".select.middleVisibleLine", { shift: "jump" }]

select.right.extend:
  title:
    en: Extend right

  commands: |-
    [".select.horizontally", { direction: 1, shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `l` (helix: select)
      `right` (helix: select)

select.right.jump:
  title:
    en: Jump right

  commands: |-
    [".select.horizontally", { direction: 1, shift: "jump" , $exclude: [] }]

  keys:
    qwerty: |-
      `l` (helix: normal)  , `right` (helix: normal)

select.to:
  title:
    en: >-
      Select to

  doc:
    en: |-
      Select to.

      If a count is specified, this command will shift to the start of the given
      line. If no count is specified, this command will shift open the `goto` menu.

select.to.extend:
  title:
    en: Extend to

  commands: |-
    [".select.to", { $exclude: [] }]

  keys:
    qwerty: |-
      `g` (helix: select)

select.to.jump:
  title:
    en: Go to

  commands: |-
    [".select.to", { $exclude: [] }]

  keys:
    qwerty: |-
      `g` (helix: normal)

select.up.extend:
  title:
    en: Extend up

  commands: |-
    [".select.vertically", { direction: -1, shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `k` (helix: select)
      `up` (helix: select)

select.up.jump:
  title:
    en: Jump up

  commands: |-
    [".select.vertically", { direction: -1, shift: "jump" , $exclude: [] }]

  keys:
    qwerty: |-
      `k` (helix: normal)  , `up` (helix: normal)

select.vertically:
  title:
    en: |-
      Select vertically

  doc:
    en: |-
      Select vertically.

selections.changeDirection:
  title:
    en: |-
      Change direction of selections

  keys:
    qwerty: |-
      `a-;` (helix: normal)
      `a-;` (helix: select)

  doc:
    en: |-
      Change direction of selections.

selections.changeOrder:
  title:
    en: |-
      Reverse selections

  doc:
    en: |-
      Reverse selections.

selections.clear.main:
  title:
    en: Clear main selections

  commands: |-
    [".selections.filter", { expression: "i !== count" , $exclude: [] }]

  keys:
    qwerty: |-
      `a-,` (helix: normal)
      `a-,` (helix: select)

selections.clear.secondary:
  title:
    en: Clear secondary selections

  commands: |-
    [".selections.filter", { expression: "i === count" , $exclude: [] }]

  keys:
    qwerty: |-
      `,` (helix: normal)
      `,` (helix: select)

selections.copy:
  title:
    en: |-
      Copy selections below

  keys:
    qwerty: |-
      `s-c` (helix: normal)
      `s-c` (helix: select)

  doc:
    en: |-
      Copy selections below.

selections.copy.above:
  title:
    en: Copy selections above

  commands: |-
    [".selections.copy", { direction: -1 }]

  keys:
    qwerty: |-
      `s-a-c` (helix: normal)
      `s-a-c` (helix: select)

selections.expandToLines:
  title:
    en: |-
      Expand to lines

  doc:
    en: |-
      Expand to lines.

      Expand selections to contain full lines (including end-of-line characters).

  keys:
    qwerty: |-
      `x` (helix: normal)
      `x` (helix: select)

selections.faceBackward:
  title:
    en: Backward selections

  commands: |-
    [".selections.changeDirection", { direction: -1 }]

  keys:
    qwerty: ""

selections.faceForward:
  title:
    en: Forward selections

  commands: |-
    [".selections.changeDirection", { direction: 1 }]

  keys:
    qwerty: |-
      `a-:` (helix: normal)
      `a-:` (helix: select)

selections.filter:
  title:
    en: |-
      Filter selections

  keys:
    qwerty: |-
      `$` (kakoune: normal)

  doc:
    en: |-
      Filter selections.

selections.filter.regexp:
  title:
    en: Keep matching selections

  commands: |-
    [".selections.filter", { defaultExpression: "/" , $exclude: [] }]

  keys:
    qwerty: |-
      `s-k` (helix: normal)
      `s-k` (helix: select)

selections.filter.regexp.inverse:
  title:
    en: Clear matching selections

  commands: |-
    [".selections.filter", { defaultExpression: "/", inverse: true, $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-k` (helix: normal)
      `s-a-k` (helix: select)

selections.hideIndices:
  title:
    en: Hide selection indices

  commands: |-
    [".selections.toggleIndices", { display: false, $exclude: [] }]

selections.merge:
  title:
    en: |-
      Merge contiguous selections

  doc:
    en: |-
      Merge contiguous selections.

  keys:
    qwerty: |-
      `a-_` (helix: normal)
      `a-_` (helix: select)

selections.open:
  title:
    en: |-
      Open selected file

  doc:
    en: |-
      Open selected file.

selections.orderAscending:
  title:
    en: Order selections ascending

  commands: |-
    [".selections.changeOrder", { direction: -1 }]

selections.orderDescending:
  title:
    en: Order selections descending

  commands: |-
    [".selections.changeOrder", { direction: 1 }]

selections.pipe:
  title:
    en: |-
      Pipe selections

  keys:
    qwerty: |-
      `a-|` (kakoune: normal)

  doc:
    en: |-
      Pipe selections.

      Run the specified command or code with the contents of each selection, and
      save the result to a register.

selections.pipe.append:
  title:
    en: Pipe and append

  commands: |-
    [".selections.pipe", { $include: ["expression","register"] }], [".edit.insert", { register: "|", where: "end" , shift: "select", $exclude: ["expression","register"] }]

  keys:
    qwerty: |-
      `!` (kakoune: normal)

selections.pipe.prepend:
  title:
    en: Pipe and prepend

  commands: |-
    [".selections.pipe", { $include: ["expression","register"] }], [".edit.insert", { register: "|", where: "start", shift: "select", $exclude: ["expression","register"] }]

  keys:
    qwerty: |-
      `a-!` (kakoune: normal)

selections.pipe.replace:
  title:
    en: Pipe and replace

  commands: |-
    [".selections.pipe", { $include: ["expression","register"] }], [".edit.insert", { register: "|", $exclude: ["expression","register"] }]

  keys:
    qwerty: |-
      `|` (kakoune: normal)

selections.reduce:
  title:
    en: |-
      Reduce selections to their cursor

  keys:
    qwerty: |-
      `;` (helix: normal)
      `;` (helix: select)

  doc:
    en: |-
      Reduce selections to their cursor.

selections.reduce.edges:
  title:
    en: Reduce selections to their ends

  commands: |-
    [".selections.reduce", { where: "both", empty: false, $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-s` (kakoune: normal)
      `s-a-s` (kakoune: select)

selections.restore:
  title:
    en: |-
      Restore selections

  doc:
    en: |-
      Restore selections.

  keys:
    qwerty: |-
      `z` (kakoune: normal)

selections.restore.withCurrent:
  title:
    en: |-
      Combine register selections with current ones

  keys:
    qwerty: |-
      `a-z` (kakoune: normal)

  doc:
    en: |-
      Combine register selections with current ones.

selections.rotate.both:
  title:
    en: |-
      Rotate selections clockwise

  keys:
    qwerty: |-
      `a-(` (helix: normal)
      `a-(` (helix: select)

  doc:
    en: |-
      Rotate selections clockwise.

selections.rotate.both.reverse:
  title:
    en: Rotate selections counter-clockwise

  commands: |-
    [".selections.rotate.both", { reverse: true }]

  keys:
    qwerty: |-
      `a-)` (helix: normal)
      `a-)` (helix: select)

selections.rotate.contents:
  title:
    en: >-
      Rotate selections clockwise (contents only)

  doc:
    en: |-
      Rotate selections clockwise (contents only).

selections.rotate.contents.reverse:
  title:
    en: Rotate selections counter-clockwise (contents only)

  commands: |-
    [".selections.rotate.contents", { reverse: true }]

selections.rotate.selections:
  title:
    en: |-
      Rotate selections clockwise (selections only)

  keys:
    qwerty: |-
      `(` (helix: normal)
      `(` (helix: select)

  doc:
    en: |-
      Rotate selections clockwise (selections only).

selections.rotate.selections.reverse:
  title:
    en: Rotate selections counter-clockwise (selections only)

  commands: |-
    [".selections.rotate.selections", { reverse: true }]

  keys:
    qwerty: |-
      `)` (helix: normal)
      `)` (helix: select)

selections.save:
  title:
    en: |-
      Save selections

  doc:
    en: |-
      Save selections.

  keys:
    qwerty: |-
      `s-z` (kakoune: normal)

selections.saveText:
  title:
    en: |-
      Copy selections text

  doc:
    en: |-
      Copy selections text.

  keys:
    qwerty: |-
      `y` (helix: normal)
      `y` (helix: select)

selections.select:
  title:
    en: >-
      Select within selections

  doc:
    en: |-
      Select within selections.

selections.select.orLeap:
  title:
    en: Leap or select

  commands: |-
    [".ifEmpty", { then: [[".seek.leap", { $exclude: [] }]], otherwise: [[".selections.select", { $exclude: [] }]] }]

  keys:
    qwerty: |-
      `s` (helix: normal)
      `s` (helix: select)

selections.showIndices:
  title:
    en: Show selection indices

  commands: |-
    [".selections.toggleIndices", { display: true , $exclude: [] }]

selections.sort:
  title:
    en: |-
      Sort selections

  doc:
    en: |-
      Sort selections.

selections.split:
  title:
    en: |-
      Split selections

  doc:
    en: |-
      Split selections.

  keys:
    qwerty: |-
      `s-s` (helix: normal)
      `s-s` (helix: select)

selections.splitLines:
  title:
    en: >-
      Split selections at line boundaries

  doc:
    en: |-
      Split selections at line boundaries.

selections.splitLines.orLeap.backward:
  title:
    en: Leap or select backward

  commands: |-
    [".ifEmpty", { then: [[".seek.leap", { direction: -1, $exclude: [] }]], otherwise: [[".selections.splitLines", { $exclude: [] }]] }]

  keys:
    qwerty: |-
      `a-s` (helix: normal)
      `a-s` (helix: select)

selections.toggleIndices:
  title:
    en: |-
      Toggle selection indices

  keys:
    qwerty: |-
      `enter` (dance: normal)
      `enter` (dance: select)

  doc:
    en: |-
      Toggle selection indices.

selections.trimLines:
  title:
    en: |-
      Trim lines

  doc:
    en: |-
      Trim lines.

      Trim selections to only contain full lines (from start to line break).

  keys:
    qwerty: |-
      `a-x` (helix: normal)
      `a-x` (helix: select)

selections.trimWhitespace:
  title:
    en: |-
      Trim whitespace

  doc:
    en: |-
      Trim whitespace.

      Trim whitespace at beginning and end of selections.

  keys:
    qwerty: |-
      `_` (helix: normal)
      `_` (helix: select)

selectRegister:
  title:
    en: |-
      Select register for next command

  keys:
    qwerty: |-
      `"` (kakoune: normal)

  doc:
    en: |-
      Select register for next command.

      When selecting a register, the next key press is used to determine what
      register is selected. If this key is a `space` character, then a new key
      press is awaited again and the returned register will be specific to the
      current document.

space.open:
  title:
    en: |-
      Open space menu

  doc:
    en: |-
      Open space menu.

updateCount:
  title:
    en: >-
      Update Dance count

  doc:
    en: |-
      Update Dance count.

      Update the current counter used to repeat the next command.

updateRegister:
  title:
    en: |-
      Update the contents of a register

  doc:
    en: |-
      Update the contents of a register.

view.line:
  title:
    en: |-
      Reveals a position based on the main cursor

  doc:
    en: |-
      Reveals a position based on the main cursor.

window.open:
  title:
    en: |-
      Open window menu

  doc:
    en: |-
      Open window menu.

anonymous:
  [
    {
        title: { en: Show left bracket menu },

        commands: '[".openMenu", { menu: "left-bracket", $exclude: [] }]',

        keys:
          {
            qwerty: "`[` (helix: normal)

              `[` (helix: select)"
          }
      },
    {
        title: { en: Show match menu },

        commands: '[".openMenu", { menu: "match", $exclude: [] }]',

        keys: { qwerty: "`m` (helix: normal)" }
      },
    {
        title: { en: "Show match menu (backward, extend)" },

        commands: '[".openMenu", { menu: "match", pass: [{direction: -1, shift: "extend"}], $exclude: [] }]',

        keys: { qwerty: "`s-m` (helix: select)" }
      },
    {
        title: { en: Show match menu (backward ) },

        commands: '[".openMenu", { menu: "match", pass: [{direction: -1}], $exclude: [] }]',

        keys: { qwerty: "`s-m` (helix: normal)" }
      },
    {
        title: { en: Show match menu (extend) },

        commands: '[".openMenu", { menu: "match", pass: [{shift: "extend"}], $exclude: [] }]',

        keys: { qwerty: "`m` (helix: select)" }
      },
    {
        title: { en: Show right bracket  menu },

        commands: '[".openMenu", { menu: "right-bracket", $exclude: [] }]',

        keys:
          {
            qwerty: "`]` (helix: normal)

              `]` (helix: select)"
          }
      },
    {
        title: { en: Show space menu },

        commands: '[".openMenu", { menu: "space", $exclude: [] }]',

        keys:
          {
            qwerty: "`space` (helix: normal)

              `space` (helix: select)"
          }
      },
    {
        title: { en: Show view menu },

        commands: '[".openMenu", { menu: "view", $exclude: [] }]',

        keys:
          {
            qwerty: "`z` (helix: normal)

              `z` (helix: select)"
          }
      },
    {
        title: { en: Show view menu (locked) },

        commands: '[".openMenu", { menu: "view", locked: true, $exclude: [] }]',

        keys:
          {
            qwerty: "`s-z` (helix: normal)

              `s-z` (helix: select)"
          }
      },
    {
        title: { en: Show window menu },

        commands: '[".openMenu", { menu: "window", $exclude: [] }]',

        keys:
          {
            qwerty: "`c-w` (helix: normal)

              `c-w` (helix: select)"
          }
      },
    {

        commands: '[".select.vertically", { direction: -1, by: "halfPage", shift: "jump" }]',

        keys:
          {
            qwerty: "`c-u` (kakoune: normal)

              `c-u` (kakoune: insert)"
          }
      },
    {

        commands: '[".select.vertically", { direction: -1, by: "page" , shift: "jump" }]',

        keys:
          {
            qwerty: "`c-b` (kakoune: normal)

              `c-b` (kakoune: insert)"
          }
      },
    {

        commands: '[".select.vertically", { direction: 1, by: "halfPage", shift: "jump" }]',

        keys:
          {
            qwerty: "`c-d` (kakoune: normal)

              `c-d` (kakoune: insert)"
          }
      },
    {

        commands: '[".select.vertically", { direction: 1, by: "page" , shift: "jump" }]',

        keys:
          {
            qwerty: "`c-f` (kakoune: normal)

              `c-f` (kakoune: insert)"
          }
      },
    {

        commands: '[".selections.restore.withCurrent", { reverse: true, $exclude: [] }]',

        keys: { qwerty: "`s-a-z` (kakoune: normal)" }
      },
    {
        title: { en: Add the digit 0 to the counter },

        commands: '[".updateCount", { addDigits: 0 }]',

        keys:
          {
            qwerty: "`0` (helix: normal)

              `NumPad0` (helix: normal)

              `0` (helix: select)

              `NumPad0` (helix: select)"
          }
      },
    {
        title: { en: Add the digit 1 to the counter },

        commands: '[".updateCount", { addDigits: 1 }]',

        keys:
          {
            qwerty: "`1` (helix: normal)

              `NumPad1` (helix: normal)

              `1` (helix: select)

              `NumPad1` (helix: select)"
          }
      },
    {
        title: { en: Add the digit 2 to the counter },

        commands: '[".updateCount", { addDigits: 2 }]',

        keys:
          {
            qwerty: "`2` (helix: normal)

              `NumPad2` (helix: normal)

              `2` (helix: select)

              `NumPad2` (helix: select)"
          }
      },
    {
        title: { en: Add the digit 3 to the counter },

        commands: '[".updateCount", { addDigits: 3 }]',

        keys:
          {
            qwerty: "`3` (helix: normal)

              `NumPad3` (helix: normal)

              `3` (helix: select)

              `NumPad3` (helix: select)"
          }
      },
    {
        title: { en: Add the digit 4 to the counter },

        commands: '[".updateCount", { addDigits: 4 }]',

        keys:
          {
            qwerty: "`4` (helix: normal)

              `NumPad4` (helix: normal)

              `4` (helix: select)

              `NumPad4` (helix: select)"
          }
      },
    {
        title: { en: Add the digit 5 to the counter },

        commands: '[".updateCount", { addDigits: 5 }]',

        keys:
          {
            qwerty: "`5` (helix: normal)

              `NumPad5` (helix: normal)

              `5` (helix: select)

              `NumPad5` (helix: select)"
          }
      },
    {
        title: { en: Add the digit 6 to the counter },

        commands: '[".updateCount", { addDigits: 6 }]',

        keys:
          {
            qwerty: "`6` (helix: normal)

              `NumPad6` (helix: normal)

              `6` (helix: select)

              `NumPad6` (helix: select)"
          }
      },
    {
        title: { en: Add the digit 7 to the counter },

        commands: '[".updateCount", { addDigits: 7 }]',

        keys:
          {
            qwerty: "`7` (helix: normal)

              `NumPad7` (helix: normal)

              `7` (helix: select)

              `NumPad7` (helix: select)"
          }
      },
    {
        title: { en: Add the digit 8 to the counter },

        commands: '[".updateCount", { addDigits: 8 }]',

        keys:
          {
            qwerty: "`8` (helix: normal)

              `NumPad8` (helix: normal)

              `8` (helix: select)

              `NumPad8` (helix: select)"
          }
      },
    {
        title: { en: Add the digit 9 to the counter },

        commands: '[".updateCount", { addDigits: 9 }]',

        keys:
          {
            qwerty: "`9` (helix: normal)

              `NumPad9` (helix: normal)

              `9` (helix: select)

              `NumPad9` (helix: select)"
          }
      },
    {

        commands: '["editor.action.commentLine", { $exclude: [] }]',

        keys:
          {
            qwerty: "`c-c` (helix: normal)

              `c-c` (helix: select)"
          }
      },
    {

        commands: '["workbench.action.showCommands", { $exclude: [] }]',

        keys:
          {
            qwerty: "`s-;` (helix: normal)

              `s-;` (helix: select)"
          }
      }
  ]
