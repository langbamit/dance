import { CommandDescriptor, Commands, createCommandArguments } from ".";
import { buildCommands } from "../api";

function describeAdditionalCommand(
  commands: Commands,
  name: string,
  flags: CommandDescriptor.Flags,
  innerCommands: Parameters<typeof buildCommands>[0],
) {
  const runCommand = buildCommands(innerCommands, { commands });

  (commands as Record<string, CommandDescriptor>)[name] = new CommandDescriptor(
    name,
    (_, argument) => _.runAsync((_) => runCommand(argument, _)),
    flags,
  );
}

/* eslint-disable max-len */
/* eslint-disable no-useless-escape */
/* eslint-disable sort-imports */

//
// Content below this line was auto-generated by load-all.build.ts. Do not edit manually.

import {
  openLeftBracket as bracket_openLeftBracket,
} from "./bracket";

import {
  copyLastErrorMessage as dev_copyLastErrorMessage,
  setSelectionBehavior as dev_setSelectionBehavior,
} from "./dev";

import {
  align as edit_align,
  alignByOffet as edit_alignByOffet,
  case_swap as edit_case_swap,
  case_toLower as edit_case_toLower,
  case_toUpper as edit_case_toUpper,
  copyIndentation as edit_copyIndentation,
  deindent as edit_deindent,
  deindent_withIncomplete as edit_deindent_withIncomplete,
  indent as edit_indent,
  indent_withEmpty as edit_indent_withEmpty,
  insert as edit_insert,
  join as edit_join,
  join_select as edit_join_select,
  newLine_above as edit_newLine_above,
  newLine_below as edit_newLine_below,
  replaceCharacters as edit_replaceCharacters,
} from "./edit";

import {
  recording_play as history_recording_play,
  recording_start as history_recording_start,
  recording_stop as history_recording_stop,
  redo as history_redo,
  redo_selections as history_redo_selections,
  repeat as history_repeat,
  repeat_edit as history_repeat_edit,
  undo as history_undo,
  undo_selections as history_undo_selections,
} from "./history";

import {
  setup as keybindings_setup,
} from "./keybindings";

import {
} from "./match";

import {
  cancel as cancel,
  changeInput as changeInput,
  ifEmpty as ifEmpty,
  ignore as ignore,
  openMenu as openMenu,
  run as run,
  selectRegister as selectRegister,
  updateCount as updateCount,
  updateRegister as updateRegister,
} from "./misc";

import {
  set as modes_set,
  set_temporarily as modes_set_temporarily,
} from "./modes";

import {
  next as search_next,
  search as search,
  selection as search_selection,
} from "./search";

import {
  enclosing as seek_enclosing,
  leap as seek_leap,
  object as seek_object,
  seek as seek,
  word as seek_word,
} from "./seek";

import {
  buffer as select_buffer,
  firstVisibleLine as select_firstVisibleLine,
  horizontally as select_horizontally,
  lastLine as select_lastLine,
  lastVisibleLine as select_lastVisibleLine,
  lineEnd as select_lineEnd,
  lineStart as select_lineStart,
  line_above as select_line_above,
  line_above_extend as select_line_above_extend,
  line_below as select_line_below,
  line_below_extend as select_line_below_extend,
  middleVisibleLine as select_middleVisibleLine,
  to as select_to,
  vertically as select_vertically,
} from "./select";

import {
  changeDirection as selections_changeDirection,
  changeOrder as selections_changeOrder,
  copy as selections_copy,
  expandToLines as selections_expandToLines,
  filter as selections_filter,
  merge as selections_merge,
  open as selections_open,
  pipe as selections_pipe,
  reduce as selections_reduce,
  restore as selections_restore,
  restore_withCurrent as selections_restore_withCurrent,
  save as selections_save,
  saveText as selections_saveText,
  select as selections_select,
  sort as selections_sort,
  split as selections_split,
  splitLines as selections_splitLines,
  toggleIndices as selections_toggleIndices,
  trimLines as selections_trimLines,
  trimWhitespace as selections_trimWhitespace,
} from "./selections";

import {
  both as selections_rotate_both,
  contents as selections_rotate_contents,
  selections as selections_rotate_selections,
} from "./selections.rotate";

import {
  open as space_open,
} from "./space";

import {
  line as view_line,
} from "./view";

import {
  open as window_open,
} from "./window";

/**
 * All defined Dance commands.
 */
export const commands: Commands = function () {
  // Normal commands.
  const commands = {
    "dance.bracket.openLeftBracket": new CommandDescriptor(
      "dance.bracket.openLeftBracket",
      (_, ) => _.runAsync(() => 
    bracket_openLeftBracket()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.cancel": new CommandDescriptor(
      "dance.cancel",
      (_, argument) => _.runAsync((_) => 
    cancel(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.changeInput": new CommandDescriptor(
      "dance.changeInput",
      (_, argument) => _.runAsync((_) => 
    changeInput(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "dance.dev.copyLastErrorMessage": new CommandDescriptor(
      "dance.dev.copyLastErrorMessage",
      (_, argument) => _.runAsync((_) => 
    dev_copyLastErrorMessage(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.dev.setSelectionBehavior": new CommandDescriptor(
      "dance.dev.setSelectionBehavior",
      (_, argument) => _.runAsync((_) => 
    dev_setSelectionBehavior(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.align": new CommandDescriptor(
      "dance.edit.align",
      (_, argument) => _.runAsync((_) => 
    edit_align(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.alignByOffet": new CommandDescriptor(
      "dance.edit.alignByOffet",
      (_, argument) => _.runAsync((_) => 
    edit_alignByOffet(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.case.swap": new CommandDescriptor(
      "dance.edit.case.swap",
      (_, ) => _.runAsync(() => 
    edit_case_swap()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.case.toLower": new CommandDescriptor(
      "dance.edit.case.toLower",
      (_, ) => _.runAsync(() => 
    edit_case_toLower()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.case.toUpper": new CommandDescriptor(
      "dance.edit.case.toUpper",
      (_, ) => _.runAsync(() => 
    edit_case_toUpper()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.copyIndentation": new CommandDescriptor(
      "dance.edit.copyIndentation",
      (_, argument) => _.runAsync((_) => 
    edit_copyIndentation(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.deindent": new CommandDescriptor(
      "dance.edit.deindent",
      (_, argument) => _.runAsync((_) => 
    edit_deindent(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.deindent.withIncomplete": new CommandDescriptor(
      "dance.edit.deindent.withIncomplete",
      (_, argument) => _.runAsync((_) => 
    edit_deindent_withIncomplete(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.indent": new CommandDescriptor(
      "dance.edit.indent",
      (_, argument) => _.runAsync((_) => 
    edit_indent(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.indent.withEmpty": new CommandDescriptor(
      "dance.edit.indent.withEmpty",
      (_, argument) => _.runAsync((_) => 
    edit_indent_withEmpty(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.insert": new CommandDescriptor(
      "dance.edit.insert",
      (_, argument) => _.runAsync((_) => 
    edit_insert(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.join": new CommandDescriptor(
      "dance.edit.join",
      (_, argument) => _.runAsync((_) => 
    edit_join(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.join.select": new CommandDescriptor(
      "dance.edit.join.select",
      (_, argument) => _.runAsync((_) => 
    edit_join_select(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.newLine.above": new CommandDescriptor(
      "dance.edit.newLine.above",
      (_, argument) => _.runAsync((_) => 
    edit_newLine_above(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.newLine.below": new CommandDescriptor(
      "dance.edit.newLine.below",
      (_, argument) => _.runAsync((_) => 
    edit_newLine_below(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.edit.replaceCharacters": new CommandDescriptor(
      "dance.edit.replaceCharacters",
      (_, argument) => _.runAsync((_) => 
    edit_replaceCharacters(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.history.recording.play": new CommandDescriptor(
      "dance.history.recording.play",
      (_, argument) => _.runAsync((_) => 
    history_recording_play(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "dance.history.recording.start": new CommandDescriptor(
      "dance.history.recording.start",
      (_, argument) => _.runAsync((_) => 
    history_recording_start(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "dance.history.recording.stop": new CommandDescriptor(
      "dance.history.recording.stop",
      (_, argument) => _.runAsync((_) => 
    history_recording_stop(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "dance.history.redo": new CommandDescriptor(
      "dance.history.redo",
      (_, ) => _.runAsync(() => 
    history_redo()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.history.redo.selections": new CommandDescriptor(
      "dance.history.redo.selections",
      (_, ) => _.runAsync(() => 
    history_redo_selections()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.history.repeat": new CommandDescriptor(
      "dance.history.repeat",
      (_, argument) => _.runAsync((_) => 
    history_repeat(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "dance.history.repeat.edit": new CommandDescriptor(
      "dance.history.repeat.edit",
      (_, argument) => _.runAsync((_) => 
    history_repeat_edit(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "dance.history.undo": new CommandDescriptor(
      "dance.history.undo",
      (_, ) => _.runAsync(() => 
    history_undo()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.history.undo.selections": new CommandDescriptor(
      "dance.history.undo.selections",
      (_, ) => _.runAsync(() => 
    history_undo_selections()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.ifEmpty": new CommandDescriptor(
      "dance.ifEmpty",
      (_, argument) => _.runAsync((_) => 
    ifEmpty(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.ignore": new CommandDescriptor(
      "dance.ignore",
      (_, ) => _.runAsync(() => 
    ignore()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.keybindings.setup": new CommandDescriptor(
      "dance.keybindings.setup",
      (_, argument) => _.runAsync((_) => 
    keybindings_setup(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.modes.set": new CommandDescriptor(
      "dance.modes.set",
      (_, argument) => _.runAsync((_) => 
    modes_set(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "dance.modes.set.temporarily": new CommandDescriptor(
      "dance.modes.set.temporarily",
      (_, argument) => _.runAsync((_) => 
    modes_set_temporarily(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "dance.openMenu": new CommandDescriptor(
      "dance.openMenu",
      (_, argument) => _.runAsync((_) => 
    openMenu(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.DoNotReplay,
    ),
    "dance.run": new CommandDescriptor(
      "dance.run",
      (_, argument) => _.runAsync((_) => 
    run(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.search": new CommandDescriptor(
      "dance.search",
      (_, argument) => _.runAsync((_) => 
    search(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.search.next": new CommandDescriptor(
      "dance.search.next",
      (_, argument) => _.runAsync((_) => 
    search_next(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.search.selection": new CommandDescriptor(
      "dance.search.selection",
      (_, argument) => _.runAsync((_) => 
    search_selection(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.seek": new CommandDescriptor(
      "dance.seek",
      (_, argument) => _.runAsync((_) => 
    seek(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.seek.enclosing": new CommandDescriptor(
      "dance.seek.enclosing",
      (_, argument) => _.runAsync((_) => 
    seek_enclosing(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.seek.leap": new CommandDescriptor(
      "dance.seek.leap",
      (_, argument) => _.runAsync((_) => 
    seek_leap(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.seek.object": new CommandDescriptor(
      "dance.seek.object",
      (_, argument) => _.runAsync((_) => 
    seek_object(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.seek.word": new CommandDescriptor(
      "dance.seek.word",
      (_, argument) => _.runAsync((_) => 
    seek_word(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.buffer": new CommandDescriptor(
      "dance.select.buffer",
      (_, ) => _.runAsync(() => 
    select_buffer()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.firstVisibleLine": new CommandDescriptor(
      "dance.select.firstVisibleLine",
      (_, argument) => _.runAsync((_) => 
    select_firstVisibleLine(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.horizontally": new CommandDescriptor(
      "dance.select.horizontally",
      (_, argument) => _.runAsync((_) => 
    select_horizontally(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.lastLine": new CommandDescriptor(
      "dance.select.lastLine",
      (_, argument) => _.runAsync((_) => 
    select_lastLine(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.lastVisibleLine": new CommandDescriptor(
      "dance.select.lastVisibleLine",
      (_, argument) => _.runAsync((_) => 
    select_lastVisibleLine(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.line.above": new CommandDescriptor(
      "dance.select.line.above",
      (_, argument) => _.runAsync((_) => 
    select_line_above(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.line.above.extend": new CommandDescriptor(
      "dance.select.line.above.extend",
      (_, argument) => _.runAsync((_) => 
    select_line_above_extend(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.line.below": new CommandDescriptor(
      "dance.select.line.below",
      (_, argument) => _.runAsync((_) => 
    select_line_below(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.line.below.extend": new CommandDescriptor(
      "dance.select.line.below.extend",
      (_, argument) => _.runAsync((_) => 
    select_line_below_extend(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.lineEnd": new CommandDescriptor(
      "dance.select.lineEnd",
      (_, argument) => _.runAsync((_) => 
    select_lineEnd(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.lineStart": new CommandDescriptor(
      "dance.select.lineStart",
      (_, argument) => _.runAsync((_) => 
    select_lineStart(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.middleVisibleLine": new CommandDescriptor(
      "dance.select.middleVisibleLine",
      (_, argument) => _.runAsync((_) => 
    select_middleVisibleLine(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.to": new CommandDescriptor(
      "dance.select.to",
      (_, argument) => _.runAsync((_) => 
    select_to(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.select.vertically": new CommandDescriptor(
      "dance.select.vertically",
      (_, argument) => _.runAsync((_) => 
    select_vertically(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selectRegister": new CommandDescriptor(
      "dance.selectRegister",
      (_, argument) => _.runAsync((_) => 
    selectRegister(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "dance.selections.changeDirection": new CommandDescriptor(
      "dance.selections.changeDirection",
      (_, argument) => _.runAsync((_) => 
    selections_changeDirection(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.changeOrder": new CommandDescriptor(
      "dance.selections.changeOrder",
      (_, argument) => _.runAsync((_) => 
    selections_changeOrder(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.copy": new CommandDescriptor(
      "dance.selections.copy",
      (_, argument) => _.runAsync((_) => 
    selections_copy(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.expandToLines": new CommandDescriptor(
      "dance.selections.expandToLines",
      (_, argument) => _.runAsync((_) => 
    selections_expandToLines(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.filter": new CommandDescriptor(
      "dance.selections.filter",
      (_, argument) => _.runAsync((_) => 
    selections_filter(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.merge": new CommandDescriptor(
      "dance.selections.merge",
      (_, ) => _.runAsync(() => 
    selections_merge()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.open": new CommandDescriptor(
      "dance.selections.open",
      (_, argument) => _.runAsync((_) => 
    selections_open(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.pipe": new CommandDescriptor(
      "dance.selections.pipe",
      (_, argument) => _.runAsync((_) => 
    selections_pipe(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.reduce": new CommandDescriptor(
      "dance.selections.reduce",
      (_, argument) => _.runAsync((_) => 
    selections_reduce(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.restore": new CommandDescriptor(
      "dance.selections.restore",
      (_, argument) => _.runAsync((_) => 
    selections_restore(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.restore.withCurrent": new CommandDescriptor(
      "dance.selections.restore.withCurrent",
      (_, argument) => _.runAsync((_) => 
    selections_restore_withCurrent(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.rotate.both": new CommandDescriptor(
      "dance.selections.rotate.both",
      (_, argument) => _.runAsync((_) => 
    selections_rotate_both(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.rotate.contents": new CommandDescriptor(
      "dance.selections.rotate.contents",
      (_, argument) => _.runAsync((_) => 
    selections_rotate_contents(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.rotate.selections": new CommandDescriptor(
      "dance.selections.rotate.selections",
      (_, argument) => _.runAsync((_) => 
    selections_rotate_selections(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.save": new CommandDescriptor(
      "dance.selections.save",
      (_, argument) => _.runAsync((_) => 
    selections_save(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.saveText": new CommandDescriptor(
      "dance.selections.saveText",
      (_, argument) => _.runAsync((_) => 
    selections_saveText(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.select": new CommandDescriptor(
      "dance.selections.select",
      (_, argument) => _.runAsync((_) => 
    selections_select(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.sort": new CommandDescriptor(
      "dance.selections.sort",
      (_, argument) => _.runAsync((_) => 
    selections_sort(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.split": new CommandDescriptor(
      "dance.selections.split",
      (_, argument) => _.runAsync((_) => 
    selections_split(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.splitLines": new CommandDescriptor(
      "dance.selections.splitLines",
      (_, argument) => _.runAsync((_) => 
    selections_splitLines(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.toggleIndices": new CommandDescriptor(
      "dance.selections.toggleIndices",
      (_, argument) => _.runAsync((_) => 
    selections_toggleIndices(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.trimLines": new CommandDescriptor(
      "dance.selections.trimLines",
      (_, ) => _.runAsync(() => 
    selections_trimLines()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.selections.trimWhitespace": new CommandDescriptor(
      "dance.selections.trimWhitespace",
      (_, argument) => _.runAsync((_) => 
    selections_trimWhitespace(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.space.open": new CommandDescriptor(
      "dance.space.open",
      (_, ) => _.runAsync(() => 
    space_open()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.updateCount": new CommandDescriptor(
      "dance.updateCount",
      (_, argument) => _.runAsync((_) => 
    updateCount(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "dance.updateRegister": new CommandDescriptor(
      "dance.updateRegister",
      (_, argument) => _.runAsync((_) => 
    updateRegister(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "dance.view.line": new CommandDescriptor(
      "dance.view.line",
      (_, argument) => _.runAsync((_) => 
    view_line(createCommandArguments(_, argument) as any)
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "dance.window.open": new CommandDescriptor(
      "dance.window.open",
      (_, ) => _.runAsync(() => 
    window_open()
  ),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
  };

  // Additional commands.
  describeAdditionalCommand(
    commands,
    "dance.edit.selectRegister-insert",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selectRegister", { $include: ["register"] }], [".edit.insert", { $exclude: ["register"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.paste.before",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "start", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.paste.after",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "end" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.paste.before.select",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "start", shift: "select", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.paste.after.select",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "end" , shift: "select", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.pasteAll.before",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "start", all: true, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.pasteAll.after",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "end" , all: true, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.pasteAll.before.select",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "start", all: true, shift: "select", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.pasteAll.after.select",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "end" , all: true, shift: "select", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.delete",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { register: "_", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.delete-insert",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".modes.set", { mode: "insert", $include: ["mode"] }], [".edit.insert", { register: "_", $exclude: ["mode"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.yank-delete",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.saveText", { $include: ["register"] }], [".edit.insert", { register: "_", $exclude: ["register"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.yank-delete-insert",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.saveText", { $include: ["register"] }], [".modes.set", { mode: "insert", $include: ["mode"] }], [".edit.insert", { register: "_", $exclude: ["register","mode"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.yank-replace",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.saveText", { register: "tmp" }], [".edit.insert"], [".updateRegister", { copyFrom: "tmp", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.history.repeat.selection",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".history.repeat", { filter: "dance\\.(seek|select|selections)", $include: ["count"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.history.repeat.seek",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".history.repeat", { filter: "dance\\.seek", $include: ["count"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.modes.set.normal",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".modes.set", { mode: "normal" }], ["hideSuggestWidget"]],
  );
  describeAdditionalCommand(
    commands,
    "dance.modes.set.insert",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".modes.set", { mode: "insert" }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.modes.set.select",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".modes.set", { mode: "select" }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.modes.insert.lineStart",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { shift: "jump", skipBlank: true }], [".modes.set", { mode: "insert", $include: ["mode"] }], [".selections.reduce", { where: "start", record: false, empty: true, $exclude: ["mode"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.modes.insert.lineEnd",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineEnd" , { shift: "jump" }], [".modes.set", { mode: "insert", $include: ["mode"] }], [".selections.reduce", { where: "end" , record: false, empty: true, $exclude: ["mode"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.modes.set.temporarily.normal",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".modes.set.temporarily", { mode: "normal" }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.modes.set.temporarily.insert",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".modes.set.temporarily", { mode: "insert" }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.search.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".search", { shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.search.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".search", { direction: -1 , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.search.backward.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".search", { direction: -1, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.search.selection.smart",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".search.selection", { smart: true, $include: ["register"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.search.previous",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".search.next", { direction: -1 , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.extend.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { shift: "extend", direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.included",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { include: true , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.included.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { include: true, shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.included.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { include: true, direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.included.extend.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { include: true, shift: "extend", direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.enclosing.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.enclosing", { shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.enclosing.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.enclosing", { direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.enclosing.extend.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.enclosing", { shift: "extend", direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.word.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.word.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.word.extend.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { shift: "extend", direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.word.ws",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { ws: true , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.word.ws.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { ws: true, shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.word.ws.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { ws: true, direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.word.ws.extend.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { ws: true, shift: "extend", direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.wordEnd",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { stopAtEnd: true , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.wordEnd.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { stopAtEnd: true , shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.wordEnd.ws",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { stopAtEnd: true , ws: true , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.wordEnd.ws.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { stopAtEnd: true , ws: true, shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.askObject",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", title: "Select whole object..." }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.askObject.inner",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ inner: true }], title: "Select inner object..." }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.askObject.start",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ where: "start" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.askObject.start.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ where: "start", shift: "extend" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.askObject.inner.start",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ inner: true, where: "start" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.askObject.inner.start.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ inner: true, where: "start", shift: "extend" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.askObject.end",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ where: "end" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.askObject.end.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ where: "end" , shift: "extend" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.askObject.inner.end",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ inner: true, where: "end" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.askObject.inner.end.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ inner: true, where: "end" , shift: "extend" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.seek.leap.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.leap", { direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.down.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: 1, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.down.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: 1, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.up.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: -1, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.up.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: -1, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.right.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.horizontally", { direction: 1, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.right.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.horizontally", { direction: 1, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.left.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.horizontally", { direction: -1, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.left.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.horizontally", { direction: -1, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.to.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.to", { $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.to.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.to", { $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.lineStart.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.lineStart.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.lineStart.skipBlank.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { skipBlank: true, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.lineStart.skipBlank.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { skipBlank: true, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.firstLine.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { count: 0, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.firstLine.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { count: 0, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.lineEnd.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineEnd", { shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.documentEnd.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineEnd", { count: 2147483647, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.documentEnd.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineEnd", { count: 2147483647, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.lastLine.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lastLine", { shift: "jump" }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.lastLine.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lastLine", { shift: "extend" }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.firstVisibleLine.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.firstVisibleLine", { shift: "jump" }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.firstVisibleLine.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.firstVisibleLine", { shift: "extend" }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.middleVisibleLine.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.middleVisibleLine", { shift: "jump" }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.middleVisibleLine.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.middleVisibleLine", { shift: "extend" }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.lastVisibleLine.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lastVisibleLine", { shift: "jump" }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.select.lastVisibleLine.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lastVisibleLine", { shift: "extend" }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.pipe.replace",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.pipe", { $include: ["expression","register"] }], [".edit.insert", { register: "|", $exclude: ["expression","register"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.pipe.append",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.pipe", { $include: ["expression","register"] }], [".edit.insert", { register: "|", where: "end" , shift: "select", $exclude: ["expression","register"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.pipe.prepend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.pipe", { $include: ["expression","register"] }], [".edit.insert", { register: "|", where: "start", shift: "select", $exclude: ["expression","register"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.filter.regexp",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.filter", { defaultExpression: "/" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.filter.regexp.inverse",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.filter", { defaultExpression: "/", inverse: true, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.clear.secondary",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.filter", { expression: "i === count" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.clear.main",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.filter", { expression: "i !== count" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.select.orLeap",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".ifEmpty", { then: [[".seek.leap", { $exclude: [] }]], otherwise: [[".selections.select", { $exclude: [] }]] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.splitLines.orLeap.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".ifEmpty", { then: [[".seek.leap", { direction: -1, $exclude: [] }]], otherwise: [[".selections.splitLines", { $exclude: [] }]] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.reduce.edges",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.reduce", { where: "both", empty: false, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.faceForward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.changeDirection", { direction: 1 }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.faceBackward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.changeDirection", { direction: -1 }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.orderDescending",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.changeOrder", { direction: 1 }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.orderAscending",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.changeOrder", { direction: -1 }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.copy.above",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.copy", { direction: -1 }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.showIndices",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.toggleIndices", { display: true , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.hideIndices",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.toggleIndices", { display: false, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.rotate.both.reverse",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.rotate.both", { reverse: true }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.rotate.contents.reverse",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.rotate.contents", { reverse: true }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.selections.rotate.selections.reverse",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.rotate.selections", { reverse: true }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.modes.insert.before",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.faceBackward", { record: false }], [".modes.set", { mode: "insert", $include: ["mode"] }], [".selections.reduce", { where: "start", record: false, empty: true, $exclude: ["mode"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.modes.insert.after",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.faceForward" , { record: false }], [".modes.set", { mode: "insert", $include: ["mode"] }], [".selections.reduce", { where: "end" , record: false, empty: true, $exclude: ["mode"] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.newLine.above.insert",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.newLine.above", { shift: "select" }], [".modes.insert.before", { $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "dance.edit.newLine.below.insert",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.newLine.below", { shift: "select" }], [".modes.insert.before", { $exclude: [] }]],
  );

  // Finalize `commands`.
  return Object.freeze(commands);
}();
